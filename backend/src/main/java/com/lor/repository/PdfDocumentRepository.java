package com.lor.repository;

import com.lor.entity.LorRequest;
import com.lor.entity.PdfDocument;
import com.lor.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Repository interface for PdfDocument entity
 */
@Repository
public interface PdfDocumentRepository extends JpaRepository<PdfDocument, Long> {

    /**
     * Find PDF document by LOR request
     */
    Optional<PdfDocument> findByLorRequest(LorRequest lorRequest);

    /**
     * Find PDF document by LOR request ID
     */
    @Query("SELECT p FROM PdfDocument p WHERE p.lorRequest.id = :requestId")
    Optional<PdfDocument> findByLorRequestId(@Param("requestId") Long requestId);

    /**
     * Find PDF document by reference number
     */
    Optional<PdfDocument> findByReferenceNumber(String referenceNumber);

    /**
     * Check if reference number exists
     */
    boolean existsByReferenceNumber(String referenceNumber);

    /**
     * Find all PDFs generated by a professor
     */
    List<PdfDocument> findByGeneratedByOrderByGeneratedAtDesc(User generatedBy);

    /**
     * Find all PDFs for a student's approved requests
     */
    @Query("SELECT p FROM PdfDocument p WHERE p.lorRequest.student.id = :studentId ORDER BY p.generatedAt DESC")
    List<PdfDocument> findByStudentId(@Param("studentId") Long studentId);

    /**
     * Find all PDFs generated by professor ID
     */
    @Query("SELECT p FROM PdfDocument p WHERE p.generatedBy.id = :professorId ORDER BY p.generatedAt DESC")
    List<PdfDocument> findByProfessorId(@Param("professorId") Long professorId);

    /**
     * Count total PDFs generated
     */
    @Query("SELECT COUNT(p) FROM PdfDocument p")
    long countTotalPdfs();

    /**
     * Count PDFs generated by a professor
     */
    long countByGeneratedBy(User generatedBy);

    /**
     * Find PDFs generated in date range
     */
    @Query("SELECT p FROM PdfDocument p WHERE p.generatedAt BETWEEN :startDate AND :endDate ORDER BY p.generatedAt DESC")
    List<PdfDocument> findByDateRange(@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

    /**
     * Find recent PDFs (last 30 days)
     */
    @Query("SELECT p FROM PdfDocument p WHERE p.generatedAt >= :thirtyDaysAgo ORDER BY p.generatedAt DESC")
    List<PdfDocument> findRecentPdfs(@Param("thirtyDaysAgo") LocalDateTime thirtyDaysAgo);

    /**
     * Calculate total file size
     */
    @Query("SELECT SUM(p.fileSize) FROM PdfDocument p")
    Long getTotalFileSize();

    /**
     * Find PDFs by file name pattern
     */
    @Query("SELECT p FROM PdfDocument p WHERE p.fileName LIKE %:pattern% ORDER BY p.generatedAt DESC")
    List<PdfDocument> findByFileNameContaining(@Param("pattern") String pattern);

    /**
     * Check if PDF exists for LOR request
     */
    @Query("SELECT CASE WHEN COUNT(p) > 0 THEN true ELSE false END FROM PdfDocument p WHERE p.lorRequest.id = :requestId")
    boolean existsByLorRequestId(@Param("requestId") Long requestId);
}
